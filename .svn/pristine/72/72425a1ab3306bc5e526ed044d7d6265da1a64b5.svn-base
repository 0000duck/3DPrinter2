using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using OpenTK;
using OpenTK.Graphics.OpenGL;
using System.IO;
using System.Globalization;
using System.Drawing;

using _3DPrinter.model.geom;
using _3DPrinter.projectManager;
using _3DPrinter.setting;
using _3DPrinter.view;
using _3DPrinter.view.ThreeD;


namespace _3DPrinter.model
{
    public delegate void PrintModelChangedEvent(PrintModel model);
    public class PrintModel : ThreeDModel
    {

        public TopoModel originalModel = new TopoModel();
        public TopoModel repairedModel = null;
        public int activeModel = 0;
        public string name = "Unknown";
        public string filename = "";
        long lastModified = 0;
        public bool outside = false,oldOutside = false;
        public Matrix4 trans,invTrans;
        public Submesh submesh = new Submesh();
        public int activeSubmesh = -1;
        public RHBoundingBox bbox = new RHBoundingBox();
        public event PrintModelChangedEvent printModelChangedEvent = null;
        public ThreeDControl ctrl;


        public PrintModel(ThreeDControl ctrl, ModelFromFile fromFile)
            :this(ctrl)
        {
            this._fromFile = fromFile;
        }


        public PrintModel(ThreeDControl ctrl)
            :base()
        {
            this.ctrl = ctrl;
//            _fromFile = new ModelFromFile();
        }

        public TopoModel Model
        {
            get
            {
                return (activeModel == 0 ? originalModel : repairedModel);
            }
        }

        public TopoModel ActiveModel
        {
            get
            {
                if (activeModel == 0 || repairedModel == null) return originalModel;
                return repairedModel;
            }
        }

        public override int ExtruderNumber {
            get { return _fromFile.ExtruderNumber; }
            set
            {
                _fromFile.ExtruderNumber = value;
                OnPropertyChanged("ExtruderNumber");
            }
        }

        public void Reset()
        {
            repairedModel = originalModel.Copy();
            repairedModel.Analyse();
            ShowRepaired(true);
        }
        public void FixNormals()
        {
            if (repairedModel == null)
                repairedModel = originalModel.Copy();
            repairedModel.UpdateNormals();
            repairedModel.AnalyseFast();
            //repairedModel.updateBad();
            ShowRepaired(true);
        }
        public void ShowRepaired(bool showRepaired)
        {
            if (showRepaired)
            {
                activeModel = 1;
            }
            else
            {
                activeModel = 0;
            }
            ForceViewRegeneration();
//!!            ctrl.Refresh();
            if (printModelChangedEvent != null)
                printModelChangedEvent(this);
        }
        public void RunTest()
        {
            if (repairedModel == null)
            {
                repairedModel = originalModel.Copy();
                repairedModel.RepairUnobtrusive();
            }
            repairedModel.RetestIntersectingTriangles();
            //repairedModel.JoinTouchedOpenEdges(0.1);
            //repairedModel.UpdateNormals();
            repairedModel.Analyse();
            repairedModel.updateBad();
            ShowRepaired(true);
        }
        public PrintModel copyPrintModel()
        {
            PrintModel stl = new PrintModel(ctrl);
            stl.filename = filename;
            stl.name = name;
            stl.lastModified = lastModified;
            stl.Position.X = Position.X;
            stl.Position.Y = Position.Y + 5 + yMax - yMin;
            stl.Position.Z = Position.Z;
            stl.Scale.X = Scale.X;
            stl.Scale.Y = Scale.Y;
            stl.Scale.Z = Scale.Z;
            stl.Rotation.X = Rotation.X;
            stl.Rotation.Y = Rotation.Y;
            stl.Rotation.Z = Rotation.Z;
            stl.Selected = false;
            stl.activeModel = activeModel;
            stl.originalModel = originalModel.Copy();
            if (repairedModel != null)
                stl.repairedModel = repairedModel.Copy();
            else
                stl.repairedModel = null;
            stl.UpdateBoundingBox();
            return stl;
        }
        public PrintModel cloneWithModel(TopoModel m,int idx)
        {
            PrintModel stl = new PrintModel(ctrl);
            stl.filename = "";
            stl.name = name+" ("+idx+")";
            stl.lastModified = lastModified;
            stl.Position.X = Position.X;
            stl.Position.Y = Position.Y;
            stl.Position.Z = Position.Z;
            stl.Scale.X = Scale.X;
            stl.Scale.Y = Scale.Y;
            stl.Scale.Z = Scale.Z;
            stl.Rotation.X = Rotation.X;
            stl.Rotation.Y = Rotation.Y;
            stl.Rotation.Z = Rotation.Z;
            stl.Selected = false;
            stl.activeModel = 0;
            stl.originalModel = m;
            stl.repairedModel = null;
            stl.UpdateBoundingBox();
            return stl;
        }

        public bool changedOnDisk()
        {
            if (filename == null || filename.Length == 0) return false;
            DateTime lastModiefied2 = File.GetLastWriteTime(filename);
            return lastModified != lastModiefied2.Ticks;
        }
        public void resetModifiedDate()
        {
            if (filename == null || filename.Length == 0) return;
            DateTime lastModified2 = File.GetLastWriteTime(filename);
            lastModified = lastModified2.Ticks;
        }
        public void reload()
        {
            if (File.Exists(filename))
            {
                //**                InfoProgressPanel ipp = InfoProgressPanel.Create(Trans.T1("IMPORTING_1", name), true);
                //**                ipp.Action = Trans.T("L_LOADING...");
                //**                ipp.Dock = DockStyle.Top;
                //**                Main.main.objectPlacement.panelControls.Controls.Add(ipp);
                //**                Main.main.objectPlacement.panelControls.Update();
                //**                Load(filename, ipp);
                //**                Land();
                //**                ForceViewRegeneration();
                //**                ipp.Finished();
            }
        }

        public void Load(string file, byte[] data)//,InfoProgressPanel ipp)
        {
            filename = file;
//**            DateTime lastModified2 = File.GetLastWriteTime(filename);
//**            lastModified = lastModified2.Ticks;
//**            originalModel.ipp = ipp;
            string lname = filename.ToLower();
            if (lname.EndsWith(".stl")) 
                originalModel.importSTL(data,filename);//, Main.main.importScaleFactor);
            else if (lname.EndsWith(".obj"))
                originalModel.importObj(data,filename);//, Main.main.importScaleFactor);
            else if (lname.EndsWith(".3ds"))
                originalModel.import3Ds(data,filename);//, Main.main.importScaleFactor);
            FileInfo info = new FileInfo(file);
            name = info.Name;
            originalModel.AnalyseFast();

//**            if (ipp.IsKilled)
//**            {
//**                originalModel.clear();
//**                return;
//**            }
            /*
            if (ipp.IsKilled)
            {
                originalModel.clear();
                return;
            }
            originalModel.updateBad();
            if (originalModel.intersectingTriangles.Count>0 || originalModel.badTriangles>0 || originalModel.manifold == false || originalModel.manyShardEdges != 0 || originalModel.loopEdges != 0 || originalModel.normalsOriented==false)
            {
                if (repairedModel == null)
                    repairedModel = originalModel.Copy();
                repairedModel.ipp = ipp;
                repairedModel.RepairUnobtrusive();
                repairedModel.Analyse();
                originalModel.Analyse();
                if (ipp.IsKilled)
                {
                    originalModel.clear();
                    repairedModel.clear();
                    return;
                }
                repairedModel.updateBad();
                ShowRepaired(true);
                repairedModel.ipp = null;
            }*/
//**            originalModel.ipp = null;
        }

/*
        public void DeepAnalysis(InfoProgressPanel ipp)
        {
            originalModel.ipp = ipp;
            originalModel.Analyse();
            if (ipp.IsKilled)
            {
                return;
            }
            originalModel.updateBad();
            if (originalModel.intersectingTriangles.Count > 0 || originalModel.badTriangles > 0 || originalModel.manifold == false || originalModel.manyShardEdges != 0 || originalModel.loopEdges != 0 || originalModel.normalsOriented == false)
            {
                if (repairedModel == null)
                    repairedModel = originalModel.Copy();
                repairedModel.ipp = ipp;
                repairedModel.RepairUnobtrusive();
                repairedModel.Analyse();
                originalModel.Analyse();
                if (ipp.IsKilled)
                {
                    originalModel.clear();
                    repairedModel.clear();
                    return;
                }
                repairedModel.updateBad();
                ShowRepaired(true);
                repairedModel.ipp = null;
            }
            originalModel.ipp = null;
        }

        */
        public override string ToString()
        {
            return name;
        }
        /// <summary>
        /// Translate Object, so that the lowest point is 0.
        /// </summary>
        public override void Land()
        {
            UpdateBoundingBox();
            Position.Z -= zMin;
        }
        public override void Center(float x, float y)
        {
            Land();
            RHVector3 center = bbox.Center;
            Position.X += x - (float)center.x;
            Position.Y += y - (float)center.y;
        }
        public override Vector3 getCenter()
        {
            return bbox.Center.asVector3();
        }
        public void UpdateMatrix()
        {
            Matrix4 transl = Matrix4.CreateTranslation(Position.X, Position.Y, Position.Z);
            Matrix4 scale = Matrix4.Scale(Scale.X!=0 ? Scale.X : 1, Scale.Y !=0 ? Scale.Y : 1, Scale.Z !=0 ? Scale.Z : 1);
            Matrix4 rotx = Matrix4.CreateRotationX(Rotation.X * (float)Math.PI / 180.0f);
            Matrix4 roty = Matrix4.CreateRotationY(Rotation.Y * (float)Math.PI / 180.0f);
            Matrix4 rotz = Matrix4.CreateRotationZ(Rotation.Z * (float)Math.PI / 180.0f);
            trans = Matrix4.Mult(scale, rotx);
            trans = Matrix4.Mult(trans, roty);
            trans = Matrix4.Mult(trans, rotz);
            trans = Matrix4.Mult(trans, transl);
            invTrans = Matrix4.Invert(trans);
        }

        public override void UpdateBoundingBox()
        {
            UpdateMatrix();
            bbox.Clear();

            foreach (TopoVertex v in ActiveModel.vertices)
            {
                includePoint(v.pos);
            }
            xMin = (float)bbox.xMin;
            xMax = (float)bbox.xMax;
            yMin = (float)bbox.yMin;
            yMax = (float)bbox.yMax;
            zMin = (float)bbox.zMin;
            zMax = (float)bbox.zMax;
//**            if (Main.main.objectPlacement.checkCutFaces.Checked)
            //**                ctrl.updateCuts = true;
            submesh.UpdateColors();
        }

        public override void Analyse()
        {
                     if (this.Selected)
                          ProjectManager.Instance.CurrentProject.Analyse(this);
        }


        private void includePoint(RHVector3 v)
        {
            float x, y, z;
            Vector4 v4 = v.asVector4();
            x = Vector4.Dot(trans.Column0, v4);
            y = Vector4.Dot(trans.Column1, v4);
            z = Vector4.Dot(trans.Column2, v4);
            bbox.Add(new RHVector3(x, y, z));
        }
        public void TransformPoint(ref Vector3 v, out float x, out float y, out float z)
        {
            Vector4 v4 = new Vector4(v, 1);
            x = Vector4.Dot(trans.Column0, v4);
            y = Vector4.Dot(trans.Column1, v4);
            z = Vector4.Dot(trans.Column2, v4);
        }
        public void TransformPoint(RHVector3 v, out float x, out float y, out float z)
        {
            Vector4 v4 = v.asVector4();
            x = Vector4.Dot(trans.Column0, v4);
            y = Vector4.Dot(trans.Column1, v4);
            z = Vector4.Dot(trans.Column2, v4);
        }
        public void TransformPoint(RHVector3 v,RHVector3 outv)
        {
            Vector4 v4 = v.asVector4();
            outv.x = Vector4.Dot(trans.Column0, v4);
            outv.y = Vector4.Dot(trans.Column1, v4);
            outv.z = Vector4.Dot(trans.Column2, v4);
        }
        public void ReverseTransformPoint(RHVector3 v, RHVector3 outv)
        {
            Vector4 v4 = v.asVector4();
            outv.x = Vector4.Dot(invTrans.Column0, v4);
            outv.y = Vector4.Dot(invTrans.Column1, v4);
            outv.z = Vector4.Dot(invTrans.Column2, v4);
        }
        bool lastShowEdges = false;
        int lastRendered = -1; // 0 = all , 1 = mesh
        bool lastSelected = false;
        public override void Paint()
        {
            TopoModel model = ActiveModel;

            if (Visible)
            {

                if (false) //**Main.main.objectPlacement.checkCutFaces.Checked)
                {
                    // int cutpos = Main.main.objectPlacement.cutPositionSlider.Value;
                    if (ForceRefresh || ctrl.updateCuts || lastRendered != 1 || activeModel != activeSubmesh ||
                        lastShowEdges != SettingsProvider.Instance.ThreeDSettings.ShowEdges || lastSelected != Selected)
                    {
                        RHVector3 normpoint = ctrl.cutPos.Add(ctrl.cutDirection);
                        RHVector3 point = new RHVector3(0, 0, 0);
                        ReverseTransformPoint(ctrl.cutPos, point);
                        ReverseTransformPoint(normpoint, normpoint);
                        RHVector3 normal = normpoint.Subtract(point);

                        submesh.Clear();
                        model.CutMesh(submesh, normal, point,
                            outside ? Submesh.MESHCOLOR_OUTSIDE : Submesh.MESHCOLOR_FRONTBACK);
                        submesh.selected = Selected;
                        submesh.Compress();
                        lastShowEdges = SettingsProvider.Instance.ThreeDSettings.ShowEdges;
                        lastSelected = Selected;
                        activeSubmesh = activeModel;
                        lastRendered = 1;
                    }
                }
                else
                {
                    if (ForceRefresh || ctrl.updateCuts || lastRendered != 0 || activeModel != activeSubmesh ||
                        lastShowEdges != SettingsProvider.Instance.ThreeDSettings.ShowEdges)
                    {
                        submesh.Clear();
                        submesh.defaultColor =
                            ProjectManager.Instance.CurrentProject.projectSettings.PrinterSettings.Extruders[ExtruderNumber].ExtruderColor;
                        model.FillMesh(submesh, outside ? Submesh.MESHCOLOR_OUTSIDE : Submesh.MESHCOLOR_FRONTBACK);
                        submesh.selected = Selected;
                        submesh.Compress();
                        lastShowEdges = SettingsProvider.Instance.ThreeDSettings.ShowEdges;
                        lastSelected = Selected;
                        activeSubmesh = activeModel;
                        lastRendered = 0;
                    }
                }
//            submesh.Draw(SettingsProvider.Instance.ThreeDSettings.drawMethod,ctrl.cam.EdgeTranslation());
                submesh.Draw(2, ctrl.cam.EdgeTranslation());
            }
            ForceRefresh = false;

        }
        public OpenTK.Graphics.Color4 convertColor(Color col)
        {
            return new OpenTK.Graphics.Color4(col.R, col.G, col.B, col.A);
        }


        public string ModelName
        {
            get { return name; }
            set { name = value; }
        }
    }
}
