<Window x:Class="_3DPrinter.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:threeD="clr-namespace:_3DPrinter.view.ThreeD"
        xmlns:_3DPrinter="clr-namespace:_3DPrinter"
        xmlns:menu="clr-namespace:_3DPrinter.view.menu"
        xmlns:notification="clr-namespace:_3DPrinter.view.notification"
        xmlns:editor="clr-namespace:_3DPrinter.view.editor"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:controls="clr-namespace:_3DPrinter.view.controls"
        xmlns:setting="clr-namespace:_3DPrinter.setting"
        xmlns:projectManager="clr-namespace:_3DPrinter.projectManager" 
        WindowStartupLocation="CenterScreen" WindowState="Maximized" Loaded="Window_Loaded"
        Style="{StaticResource CustomWindowStyle}" x:Name="main" Title="PrintCAM" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"  Width="1200" Height="800" 
        
        Closing="DataWindow_Closing"  
        >

    <Window.Resources>


        <_3DPrinter:NameFilePositionConverter x:Key="NameFilePosition"/>
        <!--        
        <_3DPrinter:MyData x:Key="dataList"/>
-->
        <_3DPrinter:VisibleConverter x:Key="VisibleConverter1"/>
        <_3DPrinter:BoolVisibleConverter x:Key="BoolVisibleConverter1"/>
        <_3DPrinter:ExpanderHeightConverter x:Key="HeightConverter" />

        <CollectionViewSource Source="{Binding Source={x:Static Fonts.SystemFontFamilies}}" x:Key="familyCollection"/>


        <DropShadowEffect x:Key="ShadowEffect1" Opacity="0.8" Direction="0" BlurRadius="70"  ShadowDepth="15" />

        <Style x:Key="ExpanderStyle1" TargetType="{x:Type Expander}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <!--            
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
-->
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Expander}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" VerticalAlignment="Top" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <ToggleButton x:Name="HeaderSite" Grid.Row="0" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" 
                                              Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}">
                                    <!-- VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"> -->
                                    <ToggleButton.FocusVisualStyle>
                                        <Style>
                                            <Setter Property="Control.Template">
                                                <Setter.Value>
                                                    <ControlTemplate>
                                                        <Border Margin="0" Padding="0" BorderThickness="0">
                                                            <Rectangle Margin="0"  SnapsToDevicePixels="True" Stroke="Black" StrokeThickness="1" StrokeDashArray="1 2"/>
                                                        </Border>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ToggleButton.FocusVisualStyle>
                                    <ToggleButton.Style>
                                        <Style TargetType="{x:Type ToggleButton}">
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                        <Border Height="48" Margin="0" Padding="0" BorderThickness="0" >
                                                            <Grid Background="Transparent" SnapsToDevicePixels="False">
                                                                <Grid.ColumnDefinitions>
                                                                    <ColumnDefinition Width="48"/>
                                                                    <ColumnDefinition Width="*"/>
                                                                </Grid.ColumnDefinitions>
                                                                <Image HorizontalAlignment="Center" VerticalAlignment="Center"  Source="images/menu2.png" Height="47" Width="47" Margin="0"></Image>
                                                                <ContentPresenter x:Name="HeaderContent" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Left" 
                                                                                  Margin="0,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                                                            </Grid>
                                                        </Border>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ToggleButton.Style>
                                </ToggleButton>
                                <ContentPresenter x:Name="ExpandSite" Grid.Row="1" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" 
                                                  Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsExpanded" Value="True">
                                <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                                <Setter Property="Height" TargetName="ExpandSite"  Value="{Binding RelativeSource={RelativeSource  Mode=FindAncestor,  AncestorType={x:Type Expander}}, Path=ActualHeight}"/>
                                <Setter Property="Effect" Value="{StaticResource ShadowEffect1}"/>
                            </Trigger>
                            <!--                            
                            <Trigger Property="IsExpanded" Value="False">
                                <Setter Property="Visibility" TargetName="HeaderContent" Value="Hidden"/>
                            </Trigger>
-->
                            <Trigger Property="ExpandDirection" Value="Left">
                                <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
                                <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                                <Setter Property="Style" TargetName="HeaderSite">
                                    <Setter.Value>
                                        <Style TargetType="{x:Type ToggleButton}">
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                        <Border  x:Name="border1" 
                                                            Padding="0" Margin="0" BorderThickness="0">
                                                            <Grid Background="Transparent" SnapsToDevicePixels="False" Margin="0">
                                                                <Grid.RowDefinitions>
                                                                    <RowDefinition Height="48"/>
                                                                    <RowDefinition Height="*"/>
                                                                </Grid.RowDefinitions>

                                                                <Grid Background="Transparent" SnapsToDevicePixels="False" Margin="0">
                                                                    <Grid.ColumnDefinitions>
                                                                        <ColumnDefinition Width="48"/>
                                                                        <ColumnDefinition Width="*"/>
                                                                    </Grid.ColumnDefinitions>
                                                                    <Image HorizontalAlignment="Center" VerticalAlignment="Center"  Source="images/menu2.png" Height="47" Width="47" Margin="0"></Image>
                                                                    <ContentPresenter  x:Name="HeaderContent" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Left" 
                                                                                  Margin="0,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                                                                </Grid>
                                                                <ContentPresenter  ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Center" Margin="0,0,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                                                            </Grid>
                                                        </Border>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                <Setter Property="Background"  TargetName="border1"  Value="{StaticResource WindowButtonOverColor}"/>
                                                            </Trigger>
                                                            <Trigger Property="IsPressed" Value="True">
                                                                <Setter Property="Background"  TargetName="border1"  Value="#ff566a99"/>
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

        </Style>

        <Style x:Key="ExpanderStyle2" TargetType="{x:Type Expander}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <!--            
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
-->
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Expander}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" VerticalAlignment="Stretch" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Border Width="1" VerticalAlignment="Stretch" Grid.RowSpan="2" BorderThickness="1" BorderBrush="#3F000000"/>
                                <ToggleButton x:Name="HeaderSite" Grid.Column="1" Grid.Row="0" ContentTemplate="{TemplateBinding HeaderTemplate}" HorizontalAlignment="Left"
                                              Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}">
                                    <!-- VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"> -->
                                    <ToggleButton.FocusVisualStyle>
                                        <Style>
                                            <Setter Property="Control.Template">
                                                <Setter.Value>
                                                    <ControlTemplate>
                                                        <Border Margin="0" Padding="0" BorderThickness="0">
                                                            <Rectangle Margin="0"  SnapsToDevicePixels="True" Stroke="Black" StrokeThickness="1" StrokeDashArray="1 2"/>
                                                        </Border>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ToggleButton.FocusVisualStyle>
                                    <ToggleButton.Style>
                                        <Style TargetType="{x:Type ToggleButton}">
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                        <Border  Margin="0" Padding="0" BorderThickness="0" >
                                                            <Grid Background="Transparent" SnapsToDevicePixels="False">
                                                                <Grid.ColumnDefinitions>
                                                                    <ColumnDefinition Width="44"/>
                                                                    <ColumnDefinition Width="*"/>
                                                                </Grid.ColumnDefinitions>
                                                                <Grid.RowDefinitions>
                                                                    <RowDefinition Height="44"/>
                                                                    <RowDefinition Height="*"/>
                                                                </Grid.RowDefinitions>
                                                                <Image x:Name="Icon1" HorizontalAlignment="Center" VerticalAlignment="Center"  Source="images/expander_left.png" Height="20" Width="20" Margin="0"></Image>
                                                                <ContentPresenter x:Name="HeaderContent" ContentTemplate="{TemplateBinding ContentTemplate}" Visibility="Hidden" Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Left" Margin="0,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center" Grid.Row="1"/>
                                                            </Grid>
                                                        </Border>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ToggleButton.Style>
                                </ToggleButton>

                                <ContentPresenter x:Name="HeaderPanel1" Grid.Column="1"  Grid.Row="1" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding ContentStringFormat}" 
                                                  Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>

                                <ContentPresenter x:Name="ExpandSite" Grid.Column="1"  Grid.Row="1" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" 
                                                  Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsExpanded" Value="True">
                                <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                                <Setter Property="Height" TargetName="ExpandSite"  Value="{Binding RelativeSource={RelativeSource  Mode=FindAncestor,  AncestorType={x:Type Expander}}, Path=ActualHeight}"/>
                                <Setter TargetName="HeaderPanel1" Property="Visibility" Value="Collapsed"  />
                            </Trigger>


                            <Trigger Property="ExpandDirection" Value="Right">
                                <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
                                <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                                <Setter Property="Style" TargetName="HeaderSite">
                                    <Setter.Value>
                                        <Style TargetType="{x:Type ToggleButton}">
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                        <Border  x:Name="border1" Padding="0" Margin="0" BorderThickness="0" Width="44">
                                                            <Grid Background="Transparent" SnapsToDevicePixels="False" Margin="0">
                                                                <Grid.RowDefinitions>
                                                                    <RowDefinition Height="44"/>
                                                                    <RowDefinition Height="*"/>
                                                                </Grid.RowDefinitions>

                                                                <Grid Background="Transparent" SnapsToDevicePixels="False" Margin="0">
                                                                    <Grid.ColumnDefinitions>
                                                                        <ColumnDefinition Width="44"/>
                                                                        <ColumnDefinition Width="*"/>
                                                                    </Grid.ColumnDefinitions>
                                                                    <Image x:Name="Icon1" HorizontalAlignment="Center" VerticalAlignment="Center"  Source="images/expander_left.png" Height="20" Width="20" Margin="0"></Image>
                                                                    <ContentPresenter  x:Name="HeaderContent"   ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Left" 
                                                                                  Margin="0,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                                                                </Grid>
                                                                <Border x:Name="HeaderPanel" BorderBrush="Transparent" HorizontalAlignment="Center" Margin="0,0,0,0" Grid.Row="1"  VerticalAlignment="Top" Visibility="Collapsed">
                                                                    <ContentPresenter  ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Center" Margin="0,0,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                                                                </Border>
                                                            </Grid>
                                                        </Border>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                <Setter Property="Background"  TargetName="border1"  Value="#4f000000"/>
                                                            </Trigger>
                                                            <Trigger Property="IsPressed" Value="True">
                                                                <Setter Property="Background"  TargetName="border1"  Value="#2f000000"/>
                                                            </Trigger>
                                                            <Trigger Property="IsChecked" Value="True">
                                                                <Setter TargetName="Icon1" Property="Source" Value="images/expander_right.png"/>
                                                                <Setter TargetName="HeaderPanel" Property="Visibility" Value="Collapsed"/>
                                                            </Trigger>
                                                            <Trigger Property="IsChecked" Value="False">
                                                                <Setter TargetName="HeaderPanel" Property="Visibility" Value="Visible"/>
                                                            </Trigger>

                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

        </Style>

        <Style x:Key="ButtonStyleMin"  TargetType="Button">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border1"  Padding="0" Margin="0" BorderThickness="0" Width="44" Height="44">
                            <Image x:Name="Icon1" HorizontalAlignment="Center" VerticalAlignment="Center"  Source="images/save_g.png" Stretch="Fill" Height="32" Width="32" Margin="0"></Image>
                        </Border>
                        <ControlTemplate.Triggers>

                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background"  TargetName="border1"  Value="#4f000000"/>
                            </Trigger>

                            <Trigger Property="IsPressed"  Value="True">
                                <Setter Property="Background"  TargetName="border1"  Value="#2f000000"/>
                            </Trigger>

                        </ControlTemplate.Triggers>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ButtonStyleRotate"  TargetType="ToggleButton">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border x:Name="border1"  Padding="0" Margin="0" BorderThickness="0" Width="44">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="44"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <Image x:Name="Icon1" HorizontalAlignment="Center" VerticalAlignment="Center"  Source="images/rotate.png" Stretch="Fill" Height="32" Width="32" Margin="0"></Image>
                                <Rectangle x:Name="track1"  Grid.Row="1" Fill="Transparent" Width="44" Height="5" Margin="0" Visibility="Collapsed"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background"  TargetName="border1"  Value="#2f000000"/>
                            </Trigger>

                            <Trigger Property="IsPressed"  Value="True">
                                <Setter Property="Background"  TargetName="border1"  Value="#6f000000"/>
                            </Trigger>

                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="track1" Property="Visibility" Value="Visible"/>
                                <Setter Property="Background"  TargetName="border1"  Value="#4f000000"/>
                            </Trigger>
                        </ControlTemplate.Triggers>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="VerticalAlignment" Value="Top"></Setter>
        </Style>

        <Style x:Key="ButtonStyleLock"  TargetType="ToggleButton">
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border x:Name="border1"  Padding="0" Margin="0" BorderThickness="0" Width="24">
                            <Image x:Name="Icon1" HorizontalAlignment="Center" VerticalAlignment="Center"  Source="images/unlock.png" Stretch="Fill" Height="24" Width="24" Margin="0"/>
                        </Border>

                        <ControlTemplate.Triggers>


                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Source"  TargetName="Icon1"  Value="images/lock.png"/>
                            </Trigger>
                        </ControlTemplate.Triggers>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="VerticalAlignment" Value="Top"></Setter>
        </Style>

        <Style x:Key="ButtonStyleVisible"  TargetType="ToggleButton">
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border x:Name="border1"  Padding="0" Margin="0" BorderThickness="0" Height="44" Width="44">
                            <Image x:Name="Icon1" HorizontalAlignment="Center" VerticalAlignment="Center"  Source="images/unvisible.png" Stretch="Fill" Height="32" Width="32" Margin="0"/>
                        </Border>

                        <ControlTemplate.Triggers>

                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background"  TargetName="border1"  Value="#2f000000"/>
                            </Trigger>

                            <Trigger Property="IsPressed"  Value="True">
                                <Setter Property="Background"  TargetName="border1"  Value="#6f000000"/>
                            </Trigger>

                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Source"  TargetName="Icon1"  Value="images/visible.png"/>
                            </Trigger>
                        </ControlTemplate.Triggers>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="VerticalAlignment" Value="Top"></Setter>
        </Style>

        <Style x:Key="Rotate_90_ButtonStyle"  TargetType="Button">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border1"  Padding="0" Margin="0" BorderThickness="0" Width="30" Height="30">
                            <TextBlock Text="90°" Foreground="White" FontSize="14" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background"  TargetName="border1"  Value="#2f000000"/>
                            </Trigger>

                            <Trigger Property="IsPressed"  Value="True">
                                <Setter Property="Background"  TargetName="border1"  Value="#6f000000"/>
                            </Trigger>

                        </ControlTemplate.Triggers>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="VerticalAlignment" Value="Top"></Setter>
        </Style>

        <_3DPrinter:SizeConverter x:Key="sizeConverter1"/>

        <Style x:Key="ButtonStyleSave"  TargetType="Button">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border1"  Padding="0" Margin="0" BorderThickness="0"  Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                            <Image x:Name="Icon1" HorizontalAlignment="Center" VerticalAlignment="Center"  Source="images/save_stl.png" Stretch="Fill"  Width="{TemplateBinding Width, Converter={StaticResource sizeConverter1}}" Height="{TemplateBinding Height, Converter={StaticResource sizeConverter1}}" Margin="0"></Image>
                        </Border>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background"  TargetName="border1"  Value="#2f000000"/>
                            </Trigger>

                            <Trigger Property="IsPressed"  Value="True">
                                <Setter Property="Background"  TargetName="border1"  Value="#6f000000"/>
                            </Trigger>

                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="VerticalAlignment" Value="Top"></Setter>
        </Style>

        <Style x:Key="ButtonStyleDeleteModel"  TargetType="Button">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border1"  Padding="0" Margin="0" BorderThickness="0" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                            <Image x:Name="Icon1" HorizontalAlignment="Center" VerticalAlignment="Center"  Source="images/delete_model.png" Stretch="Fill" Width="{TemplateBinding Width, Converter={StaticResource sizeConverter1}}" Height="{TemplateBinding Height, Converter={StaticResource sizeConverter1}}" Margin="0"></Image>
                        </Border>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background"  TargetName="border1"  Value="#2f000000"/>
                            </Trigger>

                            <Trigger Property="IsPressed"  Value="True">
                                <Setter Property="Background"  TargetName="border1"  Value="#6f000000"/>
                            </Trigger>

                        </ControlTemplate.Triggers>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="VerticalAlignment" Value="Top"></Setter>
        </Style>

        <Style x:Key="ButtonStyleAddModel"  TargetType="Button">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border1"  Padding="0" Margin="0" BorderThickness="0" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                            <Image x:Name="Icon1" HorizontalAlignment="Center" VerticalAlignment="Center"  Source="images/add_model.png" Stretch="Fill" Width="{TemplateBinding Width, Converter={StaticResource sizeConverter1}}" Height="{TemplateBinding Height, Converter={StaticResource sizeConverter1}}" Margin="0"></Image>
                        </Border>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background"  TargetName="border1"  Value="#2f000000"/>
                            </Trigger>

                            <Trigger Property="IsPressed"  Value="True">
                                <Setter Property="Background"  TargetName="border1"  Value="#6f000000"/>
                            </Trigger>

                        </ControlTemplate.Triggers>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="VerticalAlignment" Value="Top"></Setter>
        </Style>

        <Style x:Key="ButtonStyleLand"  TargetType="Button">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border1"  Padding="0" Margin="0" BorderThickness="0" Width="44" Height="44">
                            <Image x:Name="Icon1" HorizontalAlignment="Center" VerticalAlignment="Center"  Source="images/land.png" Stretch="Fill" Height="32" Width="32" Margin="0"></Image>
                        </Border>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background"  TargetName="border1"  Value="#2f000000"/>
                            </Trigger>

                            <Trigger Property="IsPressed"  Value="True">
                                <Setter Property="Background"  TargetName="border1"  Value="#6f000000"/>
                            </Trigger>

                        </ControlTemplate.Triggers>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="VerticalAlignment" Value="Top"></Setter>
        </Style>

        <Style x:Key="ButtonStyleFit"  TargetType="Button">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border1"  Padding="0" Margin="0" BorderThickness="0" Width="44" Height="44">
                            <Image x:Name="Icon1" HorizontalAlignment="Center" VerticalAlignment="Center"  Source="images/scale_to_fit.png" Stretch="Fill" Height="32" Width="32" Margin="0"></Image>
                        </Border>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background"  TargetName="border1"  Value="#2f000000"/>
                            </Trigger>

                            <Trigger Property="IsPressed"  Value="True">
                                <Setter Property="Background"  TargetName="border1"  Value="#6f000000"/>
                            </Trigger>

                        </ControlTemplate.Triggers>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="VerticalAlignment" Value="Top"></Setter>
        </Style>

        <Style x:Key="ButtonStyleAllocation"  TargetType="Button">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border1"  Padding="0" Margin="0" BorderThickness="0" Width="44" Height="44">
                            <Image x:Name="Icon1" HorizontalAlignment="Center" VerticalAlignment="Center"  Source="images/allocation2.png" Stretch="Fill" Height="32" Width="32" Margin="0"></Image>
                        </Border>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background"  TargetName="border1"  Value="#2f000000"/>
                            </Trigger>

                            <Trigger Property="IsPressed"  Value="True">
                                <Setter Property="Background"  TargetName="border1"  Value="#6f000000"/>
                            </Trigger>

                        </ControlTemplate.Triggers>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="VerticalAlignment" Value="Top"></Setter>
        </Style>

        <Style x:Key="ButtonStyleCenter"  TargetType="Button">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border1"  Padding="0" Margin="0" BorderThickness="0" Width="44" Height="44">
                            <Image x:Name="Icon1" HorizontalAlignment="Center" VerticalAlignment="Center"  Source="images/centre.png" Stretch="Fill" Height="32" Width="32" Margin="0"></Image>
                        </Border>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background"  TargetName="border1"  Value="#2f000000"/>
                            </Trigger>

                            <Trigger Property="IsPressed"  Value="True">
                                <Setter Property="Background"  TargetName="border1"  Value="#6f000000"/>
                            </Trigger>

                        </ControlTemplate.Triggers>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="VerticalAlignment" Value="Top"></Setter>
        </Style>


        <Style x:Key="ButtonStyleScale"  TargetType="ToggleButton">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border x:Name="border1"  Padding="0" Margin="0" BorderThickness="0" Width="44">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="44"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <Image x:Name="Icon1" HorizontalAlignment="Center" VerticalAlignment="Center"  Source="images/scale.png" Stretch="Fill" Height="32" Width="32" Margin="0"></Image>
                                <Rectangle x:Name="track1"  Grid.Row="1" Fill="Transparent" Width="44" Height="5" Margin="0" Visibility="Collapsed"/>
                            </Grid>
                        </Border>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background"  TargetName="border1"  Value="#2f000000"/>
                            </Trigger>

                            <Trigger Property="IsPressed"  Value="True">
                                <Setter Property="Background"  TargetName="border1"  Value="#6f000000"/>
                            </Trigger>

                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="track1" Property="Visibility" Value="Visible"/>
                                <Setter Property="Background"  TargetName="border1"  Value="#4f000000"/>
                            </Trigger>

                        </ControlTemplate.Triggers>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="VerticalAlignment" Value="Top"></Setter>

        </Style>

        <Style x:Key="ButtonStyleMove"  TargetType="ToggleButton">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border x:Name="border1"  Padding="0" Margin="0" BorderThickness="0" Width="44">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="44"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <Image x:Name="Icon1" HorizontalAlignment="Center" VerticalAlignment="Center"  Source="images/move.png" Stretch="Fill" Height="32" Width="32" Margin="0"></Image>
                                <Rectangle x:Name="track1"  Grid.Row="1" Fill="Transparent" Width="44" Height="5" Margin="0" Visibility="Collapsed"/>
                            </Grid>
                        </Border>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background"  TargetName="border1"  Value="#2f000000"/>
                            </Trigger>

                            <Trigger Property="IsPressed"  Value="True">
                                <Setter Property="Background"  TargetName="border1"  Value="#6f000000"/>
                            </Trigger>

                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="track1" Property="Visibility" Value="Visible"/>
                                <Setter Property="Background"  TargetName="border1"  Value="#4f000000"/>
                            </Trigger>

                        </ControlTemplate.Triggers>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="VerticalAlignment" Value="Top"></Setter>
        </Style>

        <Storyboard x:Key="Storyboard1" >
            <DoubleAnimationUsingKeyFrames Duration="0:0:0.3"  Storyboard.TargetProperty="RenderTransform.(TranslateTransform.Y)" >
                <EasingDoubleKeyFrame KeyTime="0%" Value="20" />
                <EasingDoubleKeyFrame KeyTime="99%" Value="0" >
                    <EasingDoubleKeyFrame.EasingFunction>
                        <ExponentialEase EasingMode="EaseOut"></ExponentialEase>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                             From="0.0" To="1.0" Duration="0:0:0.2"/>
        </Storyboard>


        <Style x:Key="ButtonMenuStyle" TargetType="{x:Type ListViewItem}">
            <Setter Property="Height" Value="48"/>
            <Setter Property="FontSize" Value="18"/>
            <Setter Property="Background" Value="{StaticResource WindowButtonForePressedColor}"/>
            <Setter Property="Foreground" Value="{StaticResource WindowForeColor}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListViewItem}">
                        <Border BorderThickness="0" Background="{TemplateBinding Background}" MouseDown="EventSetter_OnHandler">
                            <Border.Style>
                                <Style TargetType="{x:Type Border}">
                                    <Setter Property="RenderTransform">
                                        <Setter.Value>
                                            <ScaleTransform ScaleX="1" ScaleY="1"/>
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="RenderTransformOrigin">
                                        <Setter.Value>
                                            <Point X="0.5" Y="0.5"/>
                                        </Setter.Value>
                                    </Setter>
                                    <Style.Triggers>
                                        <EventTrigger RoutedEvent="PreviewMouseDown">
                                            <EventTrigger.Actions>
                                                <BeginStoryboard>
                                                    <Storyboard>
                                                        <DoubleAnimation 
                                         Storyboard.TargetProperty="RenderTransform.ScaleX"
                                         To="0.95" Duration="0:0:0.15"
                                         AutoReverse="True" />
                                                        <DoubleAnimation 
                                         Storyboard.TargetProperty="RenderTransform.ScaleY"
                                         To="0.95" Duration="0:0:0.15"
                                         AutoReverse="True" />
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </EventTrigger.Actions>
                                        </EventTrigger>
                                    </Style.Triggers>
                                </Style>

                            </Border.Style>
                            <StackPanel Orientation="Horizontal" >
                                <Image Margin="10,0,0,0" Height="24" Width="24" Stretch="Fill"  Source="{Binding Image}"/>
                                <TextBlock Margin="10,0,10,0" FontSize="12" HorizontalAlignment="Left" TextWrapping="Wrap" VerticalAlignment="Center" Text="{Binding TaskName}" MaxWidth="100"/>
                            </StackPanel>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Background" Value="{StaticResource WindowButtonForePressedColor}"/>
                                <Setter Property="Foreground" Value="{StaticResource WindowColor}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="{StaticResource MenuButtonHighlightColor}"/>
                                <Setter Property="Foreground" Value="{StaticResource WindowForeHighlightColor}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="True" />
                                    <Condition Property="IsMouseOver" Value="True" />
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" Value="{StaticResource MenuButtonHighlightColor}"/>
                                <Setter Property="Foreground" Value="#ffcfcfcf"/>
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>



        <Style x:Key="RecentButtonStyle" TargetType="{x:Type ListViewItem}">
            <Setter Property="Height" Value="48"/>
            <Setter Property="FontSize" Value="18"/>
            <Setter Property="Background" Value="{StaticResource WindowButtonColor}"/>
            <Setter Property="Foreground" Value="{StaticResource WindowForeColor}"/>
            <Setter Property="MaxWidth" Value="195"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListViewItem}">
                        <Border BorderThickness="0" BorderBrush="Tomato" Background="{TemplateBinding Background}" MouseDown="EventSetter_OnHandler" ToolTip="{Binding}">
                            <Border.Style>
                                <Style TargetType="{x:Type Border}">
                                    <Setter Property="RenderTransform">
                                        <Setter.Value>
                                            <ScaleTransform ScaleX="1" ScaleY="1"/>
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="RenderTransformOrigin">
                                        <Setter.Value>
                                            <Point X="0.5" Y="0.5"/>
                                        </Setter.Value>
                                    </Setter>
                                    <Style.Triggers>
                                        <EventTrigger RoutedEvent="PreviewMouseDown">
                                            <EventTrigger.Actions>
                                                <BeginStoryboard>
                                                    <Storyboard>
                                                        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleX" To="0.95" Duration="0:0:0.15" AutoReverse="True" />
                                                        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleY" To="0.95" Duration="0:0:0.15" AutoReverse="True" />
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </EventTrigger.Actions>
                                        </EventTrigger>
                                    </Style.Triggers>
                                </Style>

                            </Border.Style>

                            <TextBlock Margin="15,0,5,0" FontSize="14" HorizontalAlignment="Stretch" TextAlignment="Left" VerticalAlignment="Center" Width="199" Text="{Binding Converter={StaticResource NameFilePosition}}" />

                        </Border>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Background" Value="{StaticResource WindowButtonColor}"/>
                                <Setter Property="Foreground" Value="{StaticResource WindowColor}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="{StaticResource WindowButtonOverColor}"/>
                                <Setter Property="Foreground" Value="{StaticResource WindowForeHighlightColor}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="True" />
                                    <Condition Property="IsMouseOver" Value="True" />
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" Value="#ff566a99"/>
                                <Setter Property="Foreground" Value="#ffcfcfcf"/>
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="RenderTransformOrigin">
                <Setter.Value>
                    <Point X="1" Y="0"/>
                </Setter.Value>
            </Setter>
            <Setter Property="RenderTransform">
                <Setter.Value>
                    <TranslateTransform x:Name="TranslateTransform" X="0" Y="30"/>
                </Setter.Value>
            </Setter>
            <EventSetter Event="PreviewMouseLeftButtonDown" Handler="EventSetter_OnHandler3" />
            <Style.Triggers>
                <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=ListView}, Path=Visibility}" Value="Visible" >
                    <DataTrigger.EnterActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimationUsingKeyFrames Duration="0:0:0.3"  Storyboard.TargetProperty="RenderTransform.(TranslateTransform.Y)" >
                                    <EasingDoubleKeyFrame KeyTime="0%" Value="20" />
                                    <EasingDoubleKeyFrame KeyTime="99%" Value="0" >
                                        <EasingDoubleKeyFrame.EasingFunction>
                                            <ExponentialEase EasingMode="EaseOut"></ExponentialEase>
                                        </EasingDoubleKeyFrame.EasingFunction>
                                    </EasingDoubleKeyFrame>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimation Storyboard.TargetProperty="Opacity"
                             From="0.0" To="1.0" Duration="0:0:0.2"/>
                            </Storyboard>
                        </BeginStoryboard>

                    </DataTrigger.EnterActions>
                </DataTrigger>

            </Style.Triggers>

        </Style>





        <Style x:Key="SeparatorMenuStyle" TargetType="{x:Type ListViewItem}">
            <Setter Property="Height" Value="48"/>
            <Setter Property="FontSize" Value="18"/>
            <Setter Property="Margin" Value="5,0,5,0"/>
            <Setter Property="Background" Value="{StaticResource WindowButtonForePressedColor}"/>
            <Setter Property="Foreground" Value="{StaticResource WindowForeColor}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListViewItem}">
                        <Border BorderThickness="1" BorderBrush="White" Width="1" Height="36" Background="{TemplateBinding Background}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

        </Style>

        <Style x:Key="ToggleMenuStyle" TargetType="{x:Type ListViewItem}">
            <Setter Property="Height" Value="48"/>
            <Setter Property="FontSize" Value="18"/>
            <Setter Property="Margin" Value="2,0,0,2"/>
            <Setter Property="Background" Value="{StaticResource WindowButtonForePressedColor}"/>
            <Setter Property="Foreground" Value="{StaticResource WindowForeColor}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListViewItem}">
                        <Border BorderThickness="0" Background="{TemplateBinding Background}" MouseDown="EventSetter_OnHandler">
                            <Border.Style>
                                <Style TargetType="{x:Type Border}">
                                    <Setter Property="RenderTransform">
                                        <Setter.Value>
                                            <ScaleTransform ScaleX="1" ScaleY="1"/>
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="RenderTransformOrigin">
                                        <Setter.Value>
                                            <Point X="0.5" Y="0.5"/>
                                        </Setter.Value>
                                    </Setter>
                                    <Style.Triggers>
                                        <EventTrigger RoutedEvent="PreviewMouseDown">
                                            <EventTrigger.Actions>
                                                <BeginStoryboard>
                                                    <Storyboard>
                                                        <DoubleAnimation 
                                         Storyboard.TargetProperty="RenderTransform.ScaleX"
                                         To="0.95" Duration="0:0:0.15"
                                         AutoReverse="True" />
                                                        <DoubleAnimation 
                                         Storyboard.TargetProperty="RenderTransform.ScaleY"
                                         To="0.95" Duration="0:0:0.15"
                                         AutoReverse="True" />
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </EventTrigger.Actions>
                                        </EventTrigger>
                                    </Style.Triggers>
                                </Style>

                            </Border.Style>
                            <ToggleButton x:Name="ToggleButton" IsChecked="{Binding RelativeSource={RelativeSource  Mode=FindAncestor,  AncestorType={x:Type ListViewItem}}, Path=DataContext.Checked, Mode=TwoWay}">
                                <ToggleButton.Style>
                                    <Style  TargetType="{x:Type ToggleButton}">
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                    <Grid>
                                                        <VisualStateManager.VisualStateGroups>
                                                            <VisualStateGroup x:Name="CommonStates">
                                                                <VisualState x:Name="Normal" />
                                                                <VisualState x:Name="MouseOver">
                                                                    <Storyboard>
                                                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Bd" Storyboard.TargetProperty="Fill">
                                                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource ButtonHoverBackgroundBrush}" />
                                                                        </ObjectAnimationUsingKeyFrames>
                                                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Bd" Storyboard.TargetProperty="Stroke">
                                                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource ButtonHoverBorderBrush}" />
                                                                        </ObjectAnimationUsingKeyFrames>
                                                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Foreground" Storyboard.TargetName="contentControl">
                                                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource LightForegroundBrush}" />
                                                                        </ObjectAnimationUsingKeyFrames>
                                                                    </Storyboard>
                                                                </VisualState>
                                                                <VisualState x:Name="Pressed">
                                                                    <Storyboard>
                                                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Bd" Storyboard.TargetProperty="Fill">
                                                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource MenuButtonHighlightColor}" />
                                                                        </ObjectAnimationUsingKeyFrames>
                                                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Bd" Storyboard.TargetProperty="Stroke">
                                                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource MenuButtonHighlightColor}" />
                                                                        </ObjectAnimationUsingKeyFrames>
                                                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Foreground" Storyboard.TargetName="contentControl">
                                                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource LightForegroundBrush}" />
                                                                        </ObjectAnimationUsingKeyFrames>
                                                                    </Storyboard>
                                                                </VisualState>
                                                                <VisualState x:Name="Disabled">
                                                                    <Storyboard>
                                                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="DisabledVisualElement">
                                                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                                                <DiscreteObjectKeyFrame.Value>
                                                                                    <Visibility>Visible</Visibility>
                                                                                </DiscreteObjectKeyFrame.Value>
                                                                            </DiscreteObjectKeyFrame>
                                                                        </ObjectAnimationUsingKeyFrames>
                                                                    </Storyboard>
                                                                </VisualState>
                                                            </VisualStateGroup>
                                                            <VisualStateGroup x:Name="CheckStates">
                                                                <VisualState x:Name="Checked">
                                                                    <Storyboard>
                                                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="checked">
                                                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                                                <DiscreteObjectKeyFrame.Value>
                                                                                    <Visibility>Visible</Visibility>
                                                                                </DiscreteObjectKeyFrame.Value>
                                                                            </DiscreteObjectKeyFrame>
                                                                        </ObjectAnimationUsingKeyFrames>
                                                                        <!--                                                                        
                                                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="contentControl">
                                                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                                                <DiscreteObjectKeyFrame.Value>
                                                                                    <Visibility>Collapsed</Visibility>
                                                                                </DiscreteObjectKeyFrame.Value>
                                                                            </DiscreteObjectKeyFrame>
                                                                        </ObjectAnimationUsingKeyFrames>
                                                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="contentControl1">
                                                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                                                <DiscreteObjectKeyFrame.Value>
                                                                                    <Visibility>Visible</Visibility>
                                                                                </DiscreteObjectKeyFrame.Value>
                                                                            </DiscreteObjectKeyFrame>
                                                                        </ObjectAnimationUsingKeyFrames>
-->
                                                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Foreground" Storyboard.TargetName="contentControl1">
                                                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource LightForegroundBrush}" />
                                                                        </ObjectAnimationUsingKeyFrames>
                                                                    </Storyboard>
                                                                </VisualState>
                                                                <VisualState x:Name="Unchecked" />
                                                                <VisualState x:Name="Indeterminate" />
                                                            </VisualStateGroup>
                                                            <VisualStateGroup x:Name="FocusStates">
                                                                <VisualState x:Name="Focused">
                                                                    <!--                                                                    
                                                                    <Storyboard>
                                                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="FocusedVisualElement">
                                                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                                                <DiscreteObjectKeyFrame.Value>
                                                                                    <Visibility>Visible</Visibility>
                                                                                </DiscreteObjectKeyFrame.Value>
                                                                            </DiscreteObjectKeyFrame>
                                                                        </ObjectAnimationUsingKeyFrames>
                                                                    </Storyboard>
-->
                                                                </VisualState>
                                                                <VisualState x:Name="Unfocused" />
                                                            </VisualStateGroup>
                                                        </VisualStateManager.VisualStateGroups>

                                                        <Rectangle x:Name="Bd" Fill="{StaticResource ButtonBackgroundBrush}" Stroke="{StaticResource ButtonBorderBrush}" StrokeThickness="0" />
                                                        <Rectangle x:Name="checked" Fill="{StaticResource MenuButtonHighlightColor}" Stroke="{StaticResource ButtonPressedBorderBrush}" StrokeThickness="0" Visibility="Collapsed" />
                                                        <ContentControl x:Name="contentControl" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" Foreground="{TemplateBinding Foreground}">
                                                            <ContentPresenter x:Name="contentPresenter" />
                                                        </ContentControl>
                                                        <ContentControl x:Name="contentControl1" Visibility="Collapsed" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" Foreground="{StaticResource ForegroundBrush}">
                                                            <ContentPresenter x:Name="contentPresenter1" />
                                                        </ContentControl>
                                                        <Rectangle x:Name="FocusedVisualElement" Stroke="{StaticResource ButtonPressedBorderBrush}" Visibility="Collapsed" StrokeThickness="2" />
                                                        <Rectangle x:Name="DisabledVisualElement" Fill="{StaticResource DisabledVisualElement}" Visibility="Collapsed" />
                                                    </Grid>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </ToggleButton.Style>
                                <StackPanel Orientation="Horizontal" >
                                    <Image Margin="10,0,0,0" Height="24" Width="24" Stretch="Fill"  Source="{Binding Image}"/>
                                    <TextBlock Margin="10,0,10,0" FontSize="12" Foreground="{TemplateBinding Foreground}"  HorizontalAlignment="Left" TextWrapping="Wrap" MaxWidth="100" VerticalAlignment="Center" Text="{Binding TaskName}"/>
                                </StackPanel>
                            </ToggleButton>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Background" Value="{StaticResource WindowButtonForePressedColor}"/>
                                <Setter Property="Foreground" Value="{StaticResource WindowColor}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="{StaticResource MenuButtonHighlightColor}"/>
                                <Setter Property="Foreground" Value="{StaticResource WindowForeHighlightColor}"/>
                            </Trigger>

                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="True" />
                                    <Condition Property="IsMouseOver" Value="True" />
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" Value="{StaticResource MenuButtonHighlightColor}"/>
                                <Setter Property="Foreground" Value="#ffcfcfcf"/>
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

        </Style>

        <Style x:Key="ComboBoxMenuStyle" TargetType="{x:Type ListViewItem}">
            <Setter Property="Height" Value="48"/>
            <Setter Property="FontSize" Value="18"/>
            <Setter Property="Background" Value="{StaticResource WindowButtonForePressedColor}"/>
            <Setter Property="Foreground" Value="{StaticResource WindowForeColor}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListViewItem}">
                        <Border BorderThickness="0" Background="{TemplateBinding Background}" MouseDown="EventSetter_OnHandler">
                            <StackPanel Orientation="Horizontal" >
                                <TextBlock Margin="10,0,5,0" FontSize="12"  HorizontalAlignment="Left" TextWrapping="Wrap" VerticalAlignment="Center" Text="{Binding TaskName}" MaxWidth="100"/>
                                <ComboBox Margin="5,0,10,0" MaxWidth="150" VerticalAlignment="Center" ItemsSource="{Binding ItemSource, Mode=OneWay}" SelectedIndex="{Binding SelectedItemIndex, Mode=TwoWay}" IsEditable="False"/>
                            </StackPanel>
                        </Border>
                        <ControlTemplate.Triggers>
                            <!--                            
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Background" Value="{StaticResource WindowButtonForePressedColor}"/>
                                <Setter Property="Foreground" Value="{StaticResource WindowColor}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="{StaticResource MenuButtonHighlightColor}"/>
                                <Setter Property="Foreground" Value="{StaticResource WindowForeHighlightColor}"/>
                            </Trigger>

                            
                            
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="True" />
                                    <Condition Property="IsMouseOver" Value="True" />
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" Value="{StaticResource MenuButtonHighlightColor}"/>
                                <Setter Property="Foreground" Value="#ffcfcfcf"/>
                            </MultiTrigger>
-->
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

        </Style>


        <Style x:Key="LabelMenuStyle" TargetType="{x:Type ListViewItem}">
            <Setter Property="Height" Value="48"/>
            <Setter Property="FontSize" Value="18"/>
            <Setter Property="Background" Value="{StaticResource WindowButtonForePressedColor}"/>
            <Setter Property="Foreground" Value="{StaticResource WindowForeColor}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListViewItem}">
                        <Border BorderThickness="0" Background="{TemplateBinding Background}" MouseDown="EventSetter_OnHandler">
                            <StackPanel Orientation="Horizontal" >
                                <TextBlock Margin="10,0,5,0" FontSize="12"  HorizontalAlignment="Left" TextWrapping="Wrap" VerticalAlignment="Center" Text="{Binding TaskName}" MaxWidth="400"/>
                            </StackPanel>
                        </Border>
                        <ControlTemplate.Triggers>
                            <!--                            
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Background" Value="{StaticResource WindowButtonForePressedColor}"/>
                                <Setter Property="Foreground" Value="{StaticResource WindowColor}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="{StaticResource MenuButtonHighlightColor}"/>
                                <Setter Property="Foreground" Value="{StaticResource WindowForeHighlightColor}"/>
                            </Trigger>

                            
                            
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="True" />
                                    <Condition Property="IsMouseOver" Value="True" />
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" Value="{StaticResource MenuButtonHighlightColor}"/>
                                <Setter Property="Foreground" Value="#ffcfcfcf"/>
                            </MultiTrigger>
-->
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

        </Style>





    </Window.Resources>


    <!--
    
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Button Grid.Row="0" Width="150" Height="30" Content="Load" Click="ButtonBase_OnClick"></Button>
        <threeD:ThreeDControl Background="Transparent" x:Name="threedview1" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Grid.Row="1"/>
    </Grid>
    
-->
    <Grid x:Name="body">
        <!--
        <Grid>
            <threeD:ThreeDControl x:Name="threedview1" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" GotFocus="Threedview1_OnGotFocus" />
        </Grid>
-->

        <Grid VerticalAlignment="Stretch">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="245*"/>
                <ColumnDefinition Width="64*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <threeD:ThreeDControl x:Name="threedview1" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" GotFocus="Threedview1_OnGotFocus" Grid.RowSpan="2" Grid.ColumnSpan="2" />


            <StackPanel Grid.Row="0" Margin="0" Orientation="Vertical" Grid.ColumnSpan="3" Panel.ZIndex="3" >

                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>

                    <menu:MenuApp  Margin="48,0,0,0"  x:Name="topList"  HorizontalAlignment="Stretch" SelectionMode="Single"  ItemsSource="{Binding Source={x:Static setting:MenuData.Instance}, Path=Data}" Height="50" Grid.Column="0"/>

                </Grid>

                <ListView Margin="0" Focusable="False"  SelectionMode="Extended"   Visibility="{Binding ElementName=topList, Path=SelectedItem, Converter={StaticResource VisibleConverter1}}" ItemsSource="{Binding ElementName=topList, Path=SelectedItem.Commands}" Background="{StaticResource WindowButtonForePressedColor}" BorderThickness="0">
                    <ListView.ItemsPanel>
                        <ItemsPanelTemplate>
                            <WrapPanel HorizontalAlignment="Stretch"/>
                        </ItemsPanelTemplate>
                    </ListView.ItemsPanel>

                    <ListView.ItemContainerStyleSelector>
                        <_3DPrinter:MenutyleSelector ButtonStyle="{StaticResource ButtonMenuStyle}" 
                                                     SeparatorStyle="{StaticResource SeparatorMenuStyle}" 
                                                     ToggleStyle="{StaticResource ToggleMenuStyle}" 
                                                     ComboBoxStyle="{StaticResource ComboBoxMenuStyle}"
                                                     LabelStyle="{StaticResource LabelMenuStyle}"                                                     
                                                     />
                    </ListView.ItemContainerStyleSelector>
                </ListView>
            </StackPanel>

            <Expander x:Name="expander2" Padding="0" VerticalAlignment="Stretch" Grid.Row="1" Grid.ColumnSpan="3" BorderThickness="0" Margin="0" Background="#6f000000"  HorizontalAlignment="Right" ExpandDirection="Right" IsExpanded="False" Style="{StaticResource ExpanderStyle2}" >
                <Expander.Header>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>

                        <StackPanel Grid.Row="0" Orientation="Vertical" VerticalAlignment="Top" Margin="0,10,0,0">
                            <Button Style="{StaticResource ButtonStyleAddModel}" Width="44" Height="44" ToolTip="{Binding Source={x:Static setting:Localization.Instance}, Path=CurrentLanguage.LoadModel}" Click="AddModel_OnClick" />
                            <Button Style="{StaticResource ButtonStyleDeleteModel}" Width="44" Height="44" ToolTip="{Binding Source={x:Static setting:Localization.Instance}, Path=CurrentLanguage.DeleteModel}" Click="DeleteModel_OnClick" />
                            <Button Style="{StaticResource ButtonStyleSave}" Width="44" Height="44" ToolTip="{Binding Source={x:Static setting:Localization.Instance}, Path=CurrentLanguage.SaveAsSTL}" Click="SaveModelAsSTL_OnClick" />
                        </StackPanel>

                    </Grid>
                </Expander.Header>
                <Grid  Width="200" DockPanel.Dock="Right"  >
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>

                    <TextBlock Text="{Binding Source={x:Static setting:Localization.Instance}, Path=CurrentLanguage.Models}" Foreground="White" Margin="20,10,10,10" FontSize="18"/>

                    <Border  Grid.Row="1" Height="1" Margin="0,5,0,5" Width="180" HorizontalAlignment="Stretch" BorderBrush="White" BorderThickness="2" VerticalAlignment="Bottom"></Border>

                    <StackPanel Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Left" Margin="10,0,10,0">
                        <Button Style="{StaticResource ButtonStyleAddModel}" Width="32" Height="32" ToolTip="{Binding Source={x:Static setting:Localization.Instance}, Path=CurrentLanguage.LoadModel}" Click="AddModel_OnClick" />
                        <Button Style="{StaticResource ButtonStyleDeleteModel}" Width="32" Height="32" ToolTip="{Binding Source={x:Static setting:Localization.Instance}, Path=CurrentLanguage.DeleteModel}" Click="DeleteModel_OnClick" />
                        <Button Style="{StaticResource ButtonStyleSave}" Width="32" Height="32" ToolTip="{Binding Source={x:Static setting:Localization.Instance}, Path=CurrentLanguage.SaveAsSTL}" Click="SaveModelAsSTL_OnClick" />
                    </StackPanel>

                    <Border  Grid.Row="3" Height="1" Margin="0,5,0,5" Width="180" HorizontalAlignment="Stretch" BorderBrush="White" BorderThickness="2" VerticalAlignment="Bottom"></Border>

                    <ListView Grid.Row="4" HorizontalAlignment="Stretch" SelectionMode="Single" SelectedIndex="{Binding Source={x:Static projectManager:ProjectManager.Instance}, Mode=TwoWay, Path=CurrentProject.SelectedModelIndex}" ItemsSource="{Binding  Source={x:Static projectManager:ProjectManager.Instance}, Path=CurrentProject.ModelList}" Background="Transparent" BorderThickness="0" SelectionChanged ="Selector_OnSelected" ScrollViewer.HorizontalScrollBarVisibility="Disabled" Height="200" x:Name="modelListView1" Initialized="ModelListView1_OnInitialized" IsVisibleChanged="ModelListView1_OnIsVisibleChanged">
                        <ListView.Resources>

                            <Style TargetType="ListViewItem">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="ListViewItem">
                                            <Border x:Name="border1" BorderBrush="Transparent" BorderThickness="1" Background="Transparent" ToolTip="{Binding ModelName}" >
                                                <Grid>
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="Auto"/>
                                                        <ColumnDefinition Width="*"/>
                                                    </Grid.ColumnDefinitions>
                                                    <Image Margin="10,5,5,5" Height="24" Width="24" Stretch="Fill"  Source="images/model2.png" />
                                                    <TextBlock VerticalAlignment="Center" Text="{Binding ModelName}" Foreground="White" FontSize="12" TextTrimming="CharacterEllipsis" HorizontalAlignment="Stretch"  Grid.Column="1"/>
                                                </Grid>
                                            </Border>
                                            <ControlTemplate.Triggers>

                                                <MultiTrigger>
                                                    <MultiTrigger.Conditions>
                                                        <Condition Property="IsSelected" Value="true" />
                                                    </MultiTrigger.Conditions>
                                                    <Setter TargetName="border1" Property="BorderBrush" Value="White" />
                                                    <Setter TargetName="border1" Property="Background" Value="#1FFFFFFF" />
                                                </MultiTrigger>

                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                                <EventSetter Event="MouseUp"  Handler="EventSetter_OnHandler2" />
                            </Style>
                        </ListView.Resources>
                        <ListView.ItemTemplate>
                            <DataTemplate>
                            </DataTemplate>
                        </ListView.ItemTemplate>
                    </ListView>

                    <Border  Grid.Row="5" x:Name="BorderTest2"  Height="1" Margin="0,5,0,5" Width="180" HorizontalAlignment="Stretch" BorderBrush="White" BorderThickness="2" VerticalAlignment="Bottom"></Border>

                    <ComboBox Grid.Row="6" Margin="10,5" HorizontalAlignment="Stretch" DisplayMemberPath="Name" ItemsSource="{Binding Source={x:Static projectManager:ProjectManager.Instance}, Path=CurrentProject.projectSettings.PrinterSettings.Extruders}" SelectedIndex="{Binding Source={x:Static projectManager:ProjectManager.Instance}, Path=CurrentProject.SelectedModel.ExtruderNumber}" />

                    <StackPanel HorizontalAlignment="Center" Orientation="Horizontal" Grid.Row="7">
                        <Button x:Name="LandButton"  Style="{StaticResource ButtonStyleLand}"  ToolTip="{Binding Source={x:Static setting:Localization.Instance}, Path=CurrentLanguage.Lay}" Click="Land_OnClick"/>
                        <Button x:Name="FitButton" Style="{StaticResource ButtonStyleFit}" ToolTip="{Binding Source={x:Static setting:Localization.Instance}, Path=CurrentLanguage.ScaleToPrinter}" Click="Fit_OnClick"/>
                        <Button x:Name="CentrerButton" Style="{StaticResource ButtonStyleCenter}" ToolTip="{Binding Source={x:Static setting:Localization.Instance}, Path=CurrentLanguage.CenterObject}" Click="CentrerButton_OnClick"/>
                        <Button x:Name="AutoPositionButton" Style="{StaticResource ButtonStyleAllocation}" ToolTip="{Binding Source={x:Static setting:Localization.Instance}, Path=CurrentLanguage.Autoposition}" Click="AutoPositionButton_OnClick"/>
                    </StackPanel>


                    <StackPanel HorizontalAlignment="Center" Orientation="Horizontal" Grid.Row="8">
                        <ToggleButton Style="{StaticResource ButtonStyleVisible}" IsChecked="{Binding Source={x:Static projectManager:ProjectManager.Instance}, Mode=TwoWay, Path=CurrentProject.SelectedModel.Visible}" ToolTip="{Binding Source={x:Static setting:Localization.Instance}, Path=CurrentLanguage.ObjectVisible}" Click="Visible_OnClick"/>
                        <ToggleButton x:Name="moveToggle"  Style="{StaticResource ButtonStyleMove}" Click="MoveToggleButton_OnChecked" ToolTip="{Binding Source={x:Static setting:Localization.Instance}, Path=CurrentLanguage.Move}"/>
                        <ToggleButton x:Name="scaleToggle" Style="{StaticResource ButtonStyleScale}" Click="ScaleToggleButton_OnChecked" ToolTip="{Binding Source={x:Static setting:Localization.Instance}, Path=CurrentLanguage.Scale}"/>
                        <ToggleButton x:Name="rotateToggle" Style="{StaticResource ButtonStyleRotate}" Click="RotateToggleButton_OnChecked" ToolTip="{Binding Source={x:Static setting:Localization.Instance}, Path=CurrentLanguage.Rotate}"/>
                    </StackPanel>

                    <Grid x:Name="movePanel"  Grid.Row="9" Background="#4f000000" Width="186" HorizontalAlignment="Center" Visibility="Collapsed">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <TextBlock Grid.Row="0" Text="X:" Foreground="White" FontSize="18" VerticalAlignment="Center" Margin="10,5,30,5"/>
                        <TextBlock Grid.Row="1" Text="Y:" Foreground="White" FontSize="18" VerticalAlignment="Center" Margin="10,5,30,5"/>
                        <TextBlock Grid.Row="2" Text="Z:" Foreground="White" FontSize="18" VerticalAlignment="Center" Margin="10,5,30,5"/>

                        <TextBox Grid.Row="0" Grid.Column="1" Margin="5,5,10,5" Text="{Binding Source={x:Static projectManager:ProjectManager.Instance}, Mode=TwoWay, Path=CurrentProject.SelectedModel.Position.X, UpdateSourceTrigger=Explicit, StringFormat=N2}" TextChanged="TextBoxBase_OnTextChanged"/>
                        <TextBox Grid.Row="1" Grid.Column="1" Margin="5,5,10,5" Text="{Binding Source={x:Static projectManager:ProjectManager.Instance}, Mode=TwoWay, Path=CurrentProject.SelectedModel.Position.Y, UpdateSourceTrigger=Explicit, StringFormat=N2}" TextChanged="TextBoxBase_OnTextChanged"/>
                        <TextBox Grid.Row="2" Grid.Column="1" Margin="5,5,10,5" Text="{Binding Source={x:Static projectManager:ProjectManager.Instance}, Mode=TwoWay, Path=CurrentProject.SelectedModel.Position.Z, UpdateSourceTrigger=Explicit, StringFormat=N2}" TextChanged="TextBoxBase_OnTextChanged"/>

                    </Grid>

                    <Grid x:Name="rotatePanel" Grid.Row="9" Background="#4f000000" Width="186" HorizontalAlignment="Center" Visibility="Collapsed">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <TextBlock Grid.Row="0" Text="X:" Foreground="White" FontSize="18" VerticalAlignment="Center" Margin="10,5,30,5"/>
                        <TextBlock Grid.Row="1" Text="Y:" Foreground="White" FontSize="18" VerticalAlignment="Center" Margin="10,5,30,5"/>
                        <TextBlock Grid.Row="2" Text="Z:" Foreground="White" FontSize="18" VerticalAlignment="Center" Margin="10,5,30,5"/>

                        <TextBox x:Name="rotateX" Grid.Row="0" Grid.Column="1" Margin="5,5,10,5" Text="{Binding Source={x:Static projectManager:ProjectManager.Instance}, Mode=TwoWay, Path=CurrentProject.SelectedModel.Rotation.X, UpdateSourceTrigger=Explicit, StringFormat=N2}" TextChanged="TextBoxBase_OnTextChanged"/>
                        <TextBox x:Name="rotateY" Grid.Row="1" Grid.Column="1" Margin="5,5,10,5" Text="{Binding Source={x:Static projectManager:ProjectManager.Instance}, Mode=TwoWay, Path=CurrentProject.SelectedModel.Rotation.Y, UpdateSourceTrigger=Explicit, StringFormat=N2}" TextChanged="TextBoxBase_OnTextChanged"/>
                        <TextBox x:Name="rotateZ" Grid.Row="2" Grid.Column="1" Margin="5,5,10,5" Text="{Binding Source={x:Static projectManager:ProjectManager.Instance}, Mode=TwoWay, Path=CurrentProject.SelectedModel.Rotation.Z, UpdateSourceTrigger=Explicit, StringFormat=N2}" TextChanged="TextBoxBase_OnTextChanged"/>

                        <Button Grid.Row="0" Grid.Column="2" Margin="5,5,5,5" Style="{StaticResource Rotate_90_ButtonStyle}" Click="RotateX_90_OnClick"></Button>
                        <Button Grid.Row="1" Grid.Column="2" Margin="5,5,5,5" Style="{StaticResource Rotate_90_ButtonStyle}" Click="RotateY_90_OnClick"></Button>
                        <Button Grid.Row="2" Grid.Column="2" Margin="5,5,5,5" Style="{StaticResource Rotate_90_ButtonStyle}" Click="RotateZ_90_OnClick"></Button>

                    </Grid>

                    <Grid x:Name="scalePanel" Grid.Row="9" Background="#4f000000" Width="186" HorizontalAlignment="Center" Visibility="Collapsed">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <TextBlock Grid.Row="0" Text="X:" Foreground="White" FontSize="18" VerticalAlignment="Center" Margin="10,5,10,5"/>
                        <TextBlock Grid.Row="1" Text="Y:" Foreground="White" FontSize="18" VerticalAlignment="Center" Margin="10,5,10,5"/>
                        <TextBlock Grid.Row="2" Text="Z:" Foreground="White" FontSize="18" VerticalAlignment="Center" Margin="10,5,10,5"/>

                        <TextBox Grid.Row="0" Grid.Column="1" Margin="5,5,5,5" Text="{Binding Source={x:Static projectManager:ProjectManager.Instance}, Mode=TwoWay, Path=CurrentProject.SelectedModel.Scale.X, UpdateSourceTrigger=Explicit, StringFormat=N2}" TextChanged="TextBoxBaseScale_OnTextChanged"/>
                        <TextBox Grid.Row="1" Grid.Column="1" Margin="5,5,5,5" Text="{Binding Source={x:Static projectManager:ProjectManager.Instance}, Mode=TwoWay, Path=CurrentProject.SelectedModel.Scale.Y, UpdateSourceTrigger=Explicit, StringFormat=N2}" TextChanged="TextBoxBaseScale_OnTextChanged"/>
                        <TextBox Grid.Row="2" Grid.Column="1" Margin="5,5,5,5" Text="{Binding Source={x:Static projectManager:ProjectManager.Instance}, Mode=TwoWay, Path=CurrentProject.SelectedModel.Scale.Z, UpdateSourceTrigger=Explicit, StringFormat=N2}" TextChanged="TextBoxBaseScale_OnTextChanged"/>

                        <Line Grid.Row="0" Grid.Column="2" Grid.ColumnSpan="2" Margin="5,5,10,5"  X1="0" Y1="15" X2="27" Y2="15" StrokeThickness="2" Stroke="White" HorizontalAlignment="Left"></Line>
                        <Line Grid.Row="0" Grid.Column="2" Grid.ColumnSpan="2" Margin="5,5,10,5"  X1="27" Y1="15" X2="27" Y2="30" StrokeThickness="2" Stroke="White" HorizontalAlignment="Left"></Line>

                        <Line Grid.Row="1" Grid.Column="2" Margin="5,5,5,5"  X1="0" Y1="15" X2="10" Y2="15" StrokeThickness="2" Stroke="White" HorizontalAlignment="Left"></Line>

                        <Line Grid.Row="2" Grid.Column="2" Grid.ColumnSpan="2" Margin="5,5,10,5"  X1="0" Y1="15" X2="27" Y2="15" StrokeThickness="2" Stroke="White" HorizontalAlignment="Left"></Line>
                        <Line Grid.Row="2" Grid.Column="2" Grid.ColumnSpan="2" Margin="5,5,10,5"  X1="27" Y1="15" X2="27" Y2="0" StrokeThickness="2" Stroke="White" HorizontalAlignment="Left"></Line>

                        <ToggleButton x:Name="scaleLock"  Grid.Row="1" Grid.Column="3" Style="{StaticResource ButtonStyleLock}" IsChecked="{Binding Source={x:Static projectManager:ProjectManager.Instance}, Mode=TwoWay, Path=CurrentProject.SelectedModel.Scale.Lock}" Margin="0,5,10,5"/>

                    </Grid>

                    <Border  Grid.Row="10" Height="1" Margin="0,5,0,5" Width="180" HorizontalAlignment="Stretch" BorderBrush="White" BorderThickness="2" VerticalAlignment="Bottom"></Border>

                    <Grid Grid.Row="11">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="40"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <TextBlock Text="{Binding Source={x:Static setting:Localization.Instance}, Path=CurrentLanguage.Information}" Foreground="White" Margin="10,10,10,10" FontSize="18" Grid.ColumnSpan="2" HorizontalAlignment="Center"/>

                        <TextBlock Grid.Row="1" Text="{Binding Source={x:Static setting:Localization.Instance}, Path=CurrentLanguage.Points}" Foreground="White" FontSize="14" VerticalAlignment="Center" Margin="10,5,0,5"/>
                        <TextBlock Grid.Row="2" Text="{Binding Source={x:Static setting:Localization.Instance}, Path=CurrentLanguage.Edges}" Foreground="White" FontSize="14" VerticalAlignment="Center" Margin="10,5,0,5"/>
                        <TextBlock Grid.Row="3" Text="{Binding Source={x:Static setting:Localization.Instance}, Path=CurrentLanguage.Faces}" Foreground="White" FontSize="14" VerticalAlignment="Center" Margin="10,5,0,5"/>

                        <TextBlock Grid.Row="1" Grid.Column="1" Text="{Binding Source={x:Static projectManager:ProjectManager.Instance}, Path=CurrentProject.projectSettings.PrintStatistic.Points}" Foreground="White" FontSize="14" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="0,5,10,5"/>
                        <TextBlock Grid.Row="2" Grid.Column="1" Text="{Binding Source={x:Static projectManager:ProjectManager.Instance}, Path=CurrentProject.projectSettings.PrintStatistic.Edges}" Foreground="White" FontSize="14" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="0,5,10,5"/>
                        <TextBlock Grid.Row="3" Grid.Column="1" Text="{Binding Source={x:Static projectManager:ProjectManager.Instance}, Path=CurrentProject.projectSettings.PrintStatistic.Faces}" Foreground="White" FontSize="14" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="0,5,10,5"/>

                        <TextBlock Grid.Row="4" Text="{Binding Source={x:Static setting:Localization.Instance}, Path=CurrentLanguage.Surface}" Foreground="White" FontSize="14" VerticalAlignment="Center" Margin="10,5,0,5"/>
                        <TextBlock Grid.Row="5" Text="{Binding Source={x:Static setting:Localization.Instance}, Path=CurrentLanguage.Volume}" Foreground="White" FontSize="14" VerticalAlignment="Center" Margin="10,5,0,5"/>

                        <TextBlock Grid.Row="4" Grid.Column="1" Text="{Binding Source={x:Static projectManager:ProjectManager.Instance}, Path=CurrentProject.projectSettings.PrintStatistic.Surface}" Foreground="White" FontSize="14" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="0,5,10,5"/>
                        <TextBlock Grid.Row="5" Grid.Column="1" Text="{Binding Source={x:Static projectManager:ProjectManager.Instance}, Path=CurrentProject.projectSettings.PrintStatistic.Volume}" Foreground="White" FontSize="14" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="0,5,10,5"/>

                        <TextBlock Grid.Row="6" Text="{Binding Source={x:Static setting:Localization.Instance}, Path=CurrentLanguage.Size}" Foreground="White" Margin="20,10,10,10" FontSize="16" Grid.ColumnSpan="2" HorizontalAlignment="Center"/>

                        <TextBlock Grid.Row="7" Text="X:" Foreground="White" FontSize="14" VerticalAlignment="Center" Margin="10,5,0,5"/>
                        <TextBlock Grid.Row="8" Text="Y:" Foreground="White" FontSize="14" VerticalAlignment="Center" Margin="10,5,0,5"/>
                        <TextBlock Grid.Row="9" Text="Z:" Foreground="White" FontSize="14" VerticalAlignment="Center" Margin="10,5,0,5"/>

                        <TextBlock Grid.Row="7" Grid.Column="1" Text="{Binding Source={x:Static projectManager:ProjectManager.Instance}, Path=CurrentProject.projectSettings.PrintStatistic.SizeX}" Foreground="White" FontSize="14" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="0,5,10,5"/>
                        <TextBlock Grid.Row="8" Grid.Column="1" Text="{Binding Source={x:Static projectManager:ProjectManager.Instance}, Path=CurrentProject.projectSettings.PrintStatistic.SizeY}" Foreground="White" FontSize="14" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="0,5,10,5"/>
                        <TextBlock Grid.Row="9" Grid.Column="1" Text="{Binding Source={x:Static projectManager:ProjectManager.Instance}, Path=CurrentProject.projectSettings.PrintStatistic.SizeZ}" Foreground="White" FontSize="14" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="0,5,10,15"/>

                    </Grid>
                </Grid>
            </Expander>

            <Expander x:Name="expander3" Padding="0" VerticalAlignment="Stretch" Grid.Row="1" Grid.ColumnSpan="3" BorderThickness="0" Margin="0" Background="#6f000000"  HorizontalAlignment="Right" ExpandDirection="Right" IsExpanded="True" Style="{StaticResource ExpanderStyle2}" Visibility="Hidden" >
                <Expander.Header>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>

                        <Button  VerticalAlignment="Top" Margin="0,10,0,0"  Style="{StaticResource ButtonStyleMin}" Click="Save_GCode_Click" Grid.Row="0" ToolTip="{Binding Source={x:Static setting:Localization.Instance}, Path=CurrentLanguage.SaveGCode}"/>
                        <Border Height="1" BorderThickness="1" HorizontalAlignment="Stretch" Margin="5,3" Grid.Row="1" BorderBrush="White"/>

                        <controls:RangeSlider x:Name="rangeSlider1"  Grid.Row="2" Orientation="Vertical" HigherRangeBackground="#FF858585" LowerRangeBackground="#FF858585" Step="1" Margin="0,10" RangeBackground="#FF0086AF" Height="300" HorizontalAlignment="Center"
                                              Maximum="{Binding Source={x:Static setting:SettingsProvider.Instance}, Path=CommonSettings.MaxLayer}"
                                              Minimum="{Binding Source={x:Static setting:SettingsProvider.Instance}, Path=CommonSettings.MinLayer}"
                                              HigherValue="{Binding Source={x:Static setting:SettingsProvider.Instance}, Path=CommonSettings.HigherLayer}"
                                              LowerValue="{Binding Source={x:Static setting:SettingsProvider.Instance}, Path=CommonSettings.LowerLayer}"
                                              />

                        <Border Height="1" BorderThickness="1" HorizontalAlignment="Stretch" Margin="5,3" Grid.Row="3" BorderBrush="White"/>

                    </Grid>
                </Expander.Header>

                <editor:CodeEditor x:Name="codeEditor" HorizontalAlignment="Right" Width="400" />
                

            </Expander>

        </Grid>


        <Expander x:Name="expander1" Padding="0" Height="{Binding ActualHeight, ElementName=threedview1}" BorderThickness="0" Margin="0" Background="{StaticResource WindowBackColor}" HorizontalAlignment="Left" ExpandDirection="Left" IsExpanded="False" Style="{StaticResource ExpanderStyle1}">
            <Grid  Width="200">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="48"/>
                </Grid.RowDefinitions>

                <menu:ButtonExt x:Name="newProject" Grid.Row="0" HorizontalAlignment="Stretch" HorizontalContentAlignment="Left"  VerticalAlignment="Top" Content="{Binding Source={x:Static setting:Localization.Instance}, Path=CurrentLanguage.NewProject}" Click="NewProject_OnClick"  Style="{StaticResource ItemMenuButton}" Image="../../images/big_logo.png"/>
                <menu:ButtonExt x:Name="openProject" Grid.Row="1" HorizontalAlignment="Stretch" VerticalAlignment="Top" Content="{Binding Source={x:Static setting:Localization.Instance}, Path=CurrentLanguage.OpenProject}" Click="OpenProject_OnClick"  Style="{StaticResource ItemMenuButton}" Image="../../images/open.png"/>
                <menu:ButtonExt x:Name="addModel"  Grid.Row="2" HorizontalAlignment="Stretch" VerticalAlignment="Top" Content="{Binding Source={x:Static setting:Localization.Instance}, Path=CurrentLanguage.LoadModel}" Style="{StaticResource ItemMenuButton}"  Image="../../images/add_model.png"  Click="AddModel_OnClick"/>
                <menu:ButtonExt x:Name="loadCode"  Grid.Row="3" HorizontalAlignment="Stretch" VerticalAlignment="Top" Content="{Binding Source={x:Static setting:Localization.Instance}, Path=CurrentLanguage.LoadCode}" Style="{StaticResource ItemMenuButton}"  Image="../../images/add_gcode.png"  Click="LoadCode_OnClick"/>
                <menu:ButtonExt x:Name="saveProject" Grid.Row="4" HorizontalAlignment="Stretch" VerticalAlignment="Top" Content="{Binding Source={x:Static setting:Localization.Instance}, Path=CurrentLanguage.SaveProject}" Style="{StaticResource ItemMenuButton}" Image="../../images/save.png" Click="SaveProject_OnClick"/>
                <menu:ButtonExt x:Name="exit"  Grid.Row="5" HorizontalAlignment="Stretch" VerticalAlignment="Top" Content="{Binding Source={x:Static setting:Localization.Instance}, Path=CurrentLanguage.Exit}" Style="{StaticResource ItemMenuButton}" Image="../../images/exit.png"  Click="ButtonBase_OnClick3"/>


                <Border  Grid.Row="7" x:Name="BorderTest" Height="1" Margin="0,2,0,2" Width="180" HorizontalAlignment="Stretch" BorderBrush="White" BorderThickness="2" VerticalAlignment="Bottom"></Border>

                <TextBlock Grid.Row="8" Foreground="White" FontSize="16" HorizontalAlignment="Center" Text="{Binding Source={x:Static setting:Localization.Instance}, Path=CurrentLanguage.RecentFiles}" Margin="5,35,5,5"/>

                <ListView Grid.Row="9" x:Name="recentList" SelectionMode="Extended"   ItemsSource="{Binding Source={x:Static setting:SettingsProvider.Instance}, Path=RecentFiles.ProjectFiles, Mode=OneWay}" Background="Transparent" BorderThickness="0" BorderBrush="Turquoise" ItemContainerStyle="{StaticResource RecentButtonStyle}" HorizontalAlignment="Stretch"  VerticalAlignment="Stretch">
                    <ListView.ItemsPanel>
                        <ItemsPanelTemplate>
                            <WrapPanel HorizontalAlignment="Stretch" Orientation="Vertical" Background="Transparent"/>
                        </ItemsPanelTemplate>
                    </ListView.ItemsPanel>
                </ListView>

                <Border  Grid.Row="11" x:Name="Border1"  Height="1" Margin="0,2,0,2" Width="180" HorizontalAlignment="Stretch" BorderBrush="White" BorderThickness="2" VerticalAlignment="Bottom"></Border>

                <menu:ButtonExt x:Name="settings" Grid.Row="12" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Content="{Binding Source={x:Static setting:Localization.Instance}, Path=CurrentLanguage.Settings}" Style="{StaticResource ItemMenuButton}" Image="../../images/config.png" Click="Settings_OnClick"/>
                <menu:ButtonExt x:Name="about" Grid.Row="13" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Content="{Binding Source={x:Static setting:Localization.Instance}, Path=CurrentLanguage.About}" Style="{StaticResource ItemMenuButton}" Image="../../images/about.png" Click="About_OnClick"/>
            </Grid>
        </Expander>

        <Border Background="Transparent" BorderThickness="0" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" x:Name="toasterGrid" Visibility="{Binding ElementName=toaster,Mode=TwoWay, Path=Visibility}">
            <notification:ToasterControl x:Name="toaster" ToasterTitle="Title" Message="This is description message" Image="../../images/conf.png" Margin="0,0,0,25" VerticalAlignment="Bottom" Width="360" Height="80" HorizontalAlignment="Right" Visibility="Collapsed"/>
        </Border>

        <editor:CodeEditor x:Name="codeEditor2" HorizontalAlignment="Right"  Visibility="Hidden" />
    </Grid>

</Window>
